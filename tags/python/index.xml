<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Hugo Grimoire</title><link>https://trimad.github.io/tags/python/</link><description>Recent content in Python on Hugo Grimoire</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 28 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Graphing a Windows directory with pyvis</title><link>https://trimad.github.io/post/2023-12-28-pyvis-graphing-directories/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-12-28-pyvis-graphing-directories/</guid><description>
Install Dependencies 1pip install --upgrade pip 2pip install --upgrade pyvis 3pip install --upgrade networkx Generate a JSON representation of a Windows directory 1import os 2import json 3 4# List of folders to be excluded from the folder structure 5excluded_folders = [&amp;#34;.git&amp;#34;, &amp;#34;node_modules&amp;#34;, &amp;#34;.bin&amp;#34;] 6 7def create_folder_structure_json(dir_path): 8 folder_structure = {} 9 for root, dirs, files in os.walk(dir_path): 10 # Check if any excluded folders are in the current directory 11 dirs[:] = [d for d in dirs if d not in excluded_folders] 12 13 current_folder = folder_structure 14 folders = os.</description></item><item><title>Generate Knowledge Graphs with LLMs</title><link>https://trimad.github.io/post/2023-12-14-pyvis-knowledge-graphs/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-12-14-pyvis-knowledge-graphs/</guid><description>
This is a work in progress exploration of generating knowledge graphs with LLMs, inspired by a post I read on towardsdatascience.com.</description></item><item><title>local-llm</title><link>https://trimad.github.io/post/2023-10-17-local-llm/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-10-17-local-llm/</guid><description>
TheraFit is a personal project and Large Language Model approach to matching clients to therapists.
Environment Setup Clone the Git repository.
1git clone https://github.com/Trimad/TheraFit Install Miniconda.
Create the environment 1conda create --name local-llm python=3.11.4 --channel conda-forge 1conda activate local-llm Install pip requirements 1pip3 install -r requirements.txt Install the Windows version of bitsandbytes 1python -m pip install bitsandbytes --prefer-binary --extra-index-url=https://jllllll.github.io/bitsandbytes-windows-webui Force reinstall torch until it works 1pip3 install torch torchvision torchaudio --index-url https://download.</description></item><item><title>TheraFit</title><link>https://trimad.github.io/post/2023-03-28-therafit/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-03-28-therafit/</guid><description>
TheraFit is a personal project and Large Language Model approach to matching clients to therapists.</description></item></channel></rss>