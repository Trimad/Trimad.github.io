<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hugo Grimoire</title>
    <link>https://trimad.github.io/post/</link>
    <description>Recent content in Posts on Hugo Grimoire</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 23 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Robocall Telephone Consumer Protection Act</title>
      <link>https://trimad.github.io/post/2023-03-23-telemarketers/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-03-23-telemarketers/</guid>
      <description>
        
          
            It&#39;s free money.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Random Password Generator</title>
      <link>https://trimad.github.io/post/2023-03-22-random-password-generator/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-03-22-random-password-generator/</guid>
      <description>
        
          
            Randomly generated passwords. Refresh the page for new passwords.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Windows Remediation</title>
      <link>https://trimad.github.io/post/2023-03-03-windows-remediation/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-03-03-windows-remediation/</guid>
      <description>
        
          
            Useful tools for when that got dang Windows just ain&#39;t acting right. ðŸ˜¤
          
          
        
      </description>
    </item>
    
    <item>
      <title>Windows Defender Firewall</title>
      <link>https://trimad.github.io/post/2023-03-03-windows-defender-firewall/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-03-03-windows-defender-firewall/</guid>
      <description>
        
          
            Examples of rules are commonly used in network setups where specific programs or ports need to be allowed through the firewall to ensure that they can communicate with other devices or software.
          
          
        
      </description>
    </item>
    
    <item>
      <title>OpenAI Whisper</title>
      <link>https://trimad.github.io/post/2023-02-24-openai-whisper/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-24-openai-whisper/</guid>
      <description>
        
          
            Whisper is a general-purpose speech recognition model. It is trained on a large dataset of diverse audio and is also a multi-task model that can perform multilingual speech recognition as well as speech translation and language identification.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft LAPS (Local Administrator Password Solution)</title>
      <link>https://trimad.github.io/post/2023-02-22-laps/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-22-laps/</guid>
      <description>
        
          
            Microsoft LAPS (Local Administrator Password Solution) is a tool designed to securely manage local administrator account passwords on Windows domain-joined computers. It automates password generation and rotation, and stores passwords in a secure manner, providing greater control and security over local accounts.
          
          
        
      </description>
    </item>
    
    <item>
      <title>MicrosoftTeams PowerShell module</title>
      <link>https://trimad.github.io/post/2023-02-23-microsoftteams/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-23-microsoftteams/</guid>
      <description>
        
          
            PowerShell scripts for Microsoft Teams stuff.
          
          
        
      </description>
    </item>
    
    <item>
      <title>net user</title>
      <link>https://trimad.github.io/post/2023-02-21-net-user/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-21-net-user/</guid>
      <description>
        
          
            The &#34;net user&#34; command is a Command Prompt (Shell) command used to manage user accounts on a Windows operating system. It can be used to create, modify, or delete user accounts, as well as to change passwords and manage group memberships.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Decode Phishing Emails</title>
      <link>https://trimad.github.io/post/2023-02-15-decode-phishing-emails/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-15-decode-phishing-emails/</guid>
      <description>
        
          
            I&#39;ve notice that a lot of phishing emails use hexadecimal strings to obfuscate their JavaScript. These are some Python scripts useful for identifying where form actions are POSTing to.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Force domain controller to sync with AzureAD</title>
      <link>https://trimad.github.io/post/2023-02-09-force-ad-sync/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-09-force-ad-sync/</guid>
      <description>
        
          
            PowerShell script that forces an AD sync with AzureAD
          
          
        
      </description>
    </item>
    
    <item>
      <title>Purge emails with ExchangeOnlineManagement</title>
      <link>https://trimad.github.io/post/2023-02-07-purge-emails/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-07-purge-emails/</guid>
      <description>
        
          
            This PowerShell script imports the Exchange Online Management module and connects to Exchange Online, performs a &#34;hard delete&#34; of phishing emails by using a compliance search action, and then disconnects from Exchange Online PowerShell without a confirmation prompt or any notification text.
          
          
        
      </description>
    </item>
    
    <item>
      <title>MiDaS</title>
      <link>https://trimad.github.io/post/2023-02-06-midas/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-06-midas/</guid>
      <description>
        
          
            GitHub RepositoryDuring installation, I ran into an issue where the CUDA package wasn&#39;t found. Had to modify environment.yaml to:
1name: midas-py310 2channels: 3 - pytorch 4 - defaults 5dependencies: 6 - nvidia::cuda-toolkit=11.7.0 7 - python=3.10.8 8 - pytorch::pytorch=1.13.0 9 - torchvision=0.14.0 10 - pip=22.3.1 11 - numpy=1.23.4 12 - pip: 13 - opencv-python==4.6.0.66 14 - imutils==0.5.4 15 - timm==0.6.12 16 - einops==0.6.0 Commands that were helpful for troubleshooting CUDA:
          
          
        
      </description>
    </item>
    
    <item>
      <title>Uninstall Third-Party Drivers with CMD</title>
      <link>https://trimad.github.io/post/2023-02-17-uninstall-drivers/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-17-uninstall-drivers/</guid>
      <description>
        
          
            You can uninstall third-party drivers (such as the WAVES MaxxAudio Pro driver) from the Command Prompt (CMD) by using the &amp;quot;pnputil.exe&amp;quot; utility. Here&#39;s the basic process:
Open Command Prompt as administrator: Press the Windows key + X, and then select &amp;quot;Command Prompt (Admin)&amp;quot;.
Type the following command and press Enter:
1pnputil.exe -e 2# or export the list to a file 3pnputil.exe -e &amp;gt; !drivers.csv This command lists all the third-party drivers installed on your system.
          
          
        
      </description>
    </item>
    
    <item>
      <title>FILM</title>
      <link>https://trimad.github.io/post/2023-02-05-film/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-05-film/</guid>
      <description>
        
          
            GitHub RepositoryGPU Bug Fix The Windows setup instructions in the GitHub repository are wrong or outdated. Tensorflow kept trying to use the CPU instead of the GPU until I installed CUDA and CUDNN this way:
1conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0 2python -m pip install &amp;#34;tensorflow&amp;lt;2.11&amp;#34; 3pip install protobuf==3.20.3 Usage Activate the Conda environment:
1conda activate frame_interpolation From the Conda Shell, cd to the FILM directory:
1cd C:\Users\trima\frame-interpolation Open File Explorer at this directory and copy the frames you want to interpolate to the &amp;quot;photos&amp;quot; folder.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Stable Diffusion Scripts</title>
      <link>https://trimad.github.io/post/2023-02-05-stable-diffusion/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-05-stable-diffusion/</guid>
      <description>
        
          
            Stable Diffusion is an image generation technique that uses a diffusion process to iteratively generate images. It starts with a noise image and applies a series of transformations to it, where each transformation adds a little bit of noise to the image. These transformations are repeated over multiple time steps, and the amount of noise added is gradually decreased over time. This process smooths out the noise and generates a high-quality image. The stability of the diffusion process is maintained by scaling the added noise based on the image&#39;s current state, preventing the image from diverging or collapsing into a uniform color. Stable Diffusion is a powerful and versatile image generation technique that can produce realistic, high-resolution images with fine details and a wide range of styles.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Mastering Time with Shell and PowerShell</title>
      <link>https://trimad.github.io/post/2023-02-02-mastering-time-with-shell-and-powershell/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-02-mastering-time-with-shell-and-powershell/</guid>
      <description>
        
          
            Discover an array of shell and PowerShell commands related to time management, such as checking the last boot-up time, system boot time, and changing the time zone.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Download Streams</title>
      <link>https://trimad.github.io/post/2022-06-09-download-streams/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-06-09-download-streams/</guid>
      <description>
        
          
            This is my tentative work flow for downloading movie streams online. The gist of what I&#39;ve learned about this process is that every HTTP Live Stream (HLS) begins with an .m3u8 playlist with a MIME type of x-mpegURL or vnd.apple.mpegURL. This playlist lists a series of .ts files that are streamed one at a time and decoded so your browser is not burdened with downloading the entire movie every time you refresh the page.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Logistic Map</title>
      <link>https://trimad.github.io/post/2022-05-14-logistic-map/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-05-14-logistic-map/</guid>
      <description>
        
          
            The logistic map is a mathematical model used to describe the population growth of a species over time. It is a simple equation that takes into account the effects of limited resources and environmental factors on population growth. The logistic map produces a pattern of population growth that exhibits chaotic behavior as the values of the model&#39;s parameters change, making it a valuable tool for studying complex systems.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Archimedean Spiral</title>
      <link>https://trimad.github.io/post/2022-05-04-archimedean-spiral/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-05-04-archimedean-spiral/</guid>
      <description>
        
          
            Edit This SketchThis sketch draws an Archimedean Spiral using polar coordinates. If the &amp;quot;EXPORT&amp;quot; variable is true, the sketch will spit-out an SVG file of the drawn spiral. My motivation for making this was so I could cut-out a spiral with my wife&#39;s Cricut Maker and hang something more interesting above my son&#39;s bassinet than empty white ceiling.
Example SVG files{: width=&amp;quot;auto&amp;quot; height=&amp;quot;auto&amp;quot; }
{: width=&amp;quot;auto&amp;quot; height=&amp;quot;auto&amp;quot; }
          
          
        
      </description>
    </item>
    
    <item>
      <title>NVIDIA Maxine Windows Audio Effects SDK</title>
      <link>https://trimad.github.io/post/2022-04-20-using-the-nvidia-maxine-audio-effects-sdk-demo/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-04-20-using-the-nvidia-maxine-audio-effects-sdk-demo/</guid>
      <description>
        
          
            This is my tentative workflow for cleaning-up poor audio using the NVIDIA Maxine Windows Audio Effects SDK.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Download YouTube Videos</title>
      <link>https://trimad.github.io/post/2022-04-16-downloading-youtube-videos/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-04-16-downloading-youtube-videos/</guid>
      <description>
        
          
            yt-dlpyt-dlp is a free and open-source command-line tool for downloading videos and audio from YouTube and other video hosting sites. It is a fork of youtube-dl with additional features and improvements, including better performance and more frequent updates. Unlike youtube-dl, which has faced various legal challenges and takedowns, yt-dlp is actively maintained and regularly updated to ensure compatibility with the latest changes in video hosting sites.GitHub Repository Download the Windows executableDownload a YouTube video with default settings:
          
          
        
      </description>
    </item>
    
    <item>
      <title>Dump WiFi Passwords</title>
      <link>https://trimad.github.io/post/2022-04-11-dump-wifi-passwords/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-04-11-dump-wifi-passwords/</guid>
      <description>
        
          
            This script uses the Windows command-line tool &amp;quot;netsh&amp;quot; to retrieve information about wireless network profiles that have been previously connected to on the computer. It then parses the information to extract the SSID (name) and password for each profile, and outputs that information to a CSV file named &amp;quot;output.csv&amp;quot;. Finally, the script opens the &amp;quot;output.csv&amp;quot; file.
The script uses the &amp;quot;Invoke-Item&amp;quot; command to open the &amp;quot;output.csv&amp;quot; file, which is the PowerShell command equivalent of double-clicking on a file in Windows Explorer.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Record Desktop Silently</title>
      <link>https://trimad.github.io/post/2022-02-09-record-desktop-silently/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-02-09-record-desktop-silently/</guid>
      <description>
        
          
            Place these 3 files in any directory and run update.vbs to begin recording a Windows session silently.
Github Repositoryupdate.exe This file is just ffmpeg that&#39;s been renamed to be slightly more inconspicuous in Task Manager. update.bat There are two lines to this batch file. The first line deletes &amp;quot;output.mp4&amp;quot; if it already exists in the same directory. The framerate in frames per second of the recording is set here following the &amp;quot;-framerate&amp;quot; flag The amount of time in seconds to record is set here following the &amp;quot;-t&amp;quot; flag output.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ffmpeg</title>
      <link>https://trimad.github.io/post/2022-01-27-ffmpeg/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-01-27-ffmpeg/</guid>
      <description>
        
          
            ffmpeg is a complete, cross-platform solution to record, convert and stream audio and video.
ffmpeg Downloadffmpeg DocumentationAudio Processing Convert to 8kHz, single-channel PCM 1ffmpeg -i &amp;#34;input.mp3&amp;#34; -ar 8000 -ac 1 output.wav Convert to 16kHz, single-channel PCM 1ffmpeg -i &amp;#34;input.mp3&amp;#34; -ar 16000 -ac 1 output.wav Convert to 48kHz, single-channel PCM 1ffmpeg -i input.mp3 -ar 48000 -ac 1 output.wav Video Processing Add Music to a Video 1ffmpeg -i video.mp4 -i music.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Combining PowerShell Cmdlets</title>
      <link>https://trimad.github.io/post/2021-11-17-combining-powershell-cmdlets/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2021-11-17-combining-powershell-cmdlets/</guid>
      <description>
        
          
            I found myself in a situation where I needed to generate a report to troubleshoot an email issue for a client. Some data could only be retrieved from the ExchangeOnlineManagement module, and other data only from the AzureAD module. This PowerShell script demonstrates one solution of using both modules in tandem with a nested for-loop that compares the UserPrincipalName with every iteration.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Active Directory Group Membership</title>
      <link>https://trimad.github.io/post/2021-09-16-active-directory-group-membership/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2021-09-16-active-directory-group-membership/</guid>
      <description>
        
          
            This PowerShell script generates a report showing all groups and group members when run on an on-premises domain controller. The script requires that you import the ActiveDirectory module. The report is in .csv format so the rows may need some manipulation to see all the members if you&#39;re opening it in Excel.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Managing Exchange Calendars</title>
      <link>https://trimad.github.io/post/2021-09-16-manage-exchange-online-calendars/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2021-09-16-manage-exchange-online-calendars/</guid>
      <description>
        
          
            1#If not installed already 2Install-Module ExchangeOnlineManagement 3#Import 4Import-Module ExchangeOnlineManagement 5#Connect 6Connect-ExchangeOnline -UserPrincipalName &amp;lt;UPN&amp;gt; 7 8# Remove AccessRights from a user 9Remove-MailboxFolderPermission -Identity target@company.com:\Calendar -User user@company.com 10# Grant AccessRights to a user 11Add-MailboxFolderPermission -Identity target@company.com:\Calendar -User user@company.com -AccessRights Owner 12# See who currently has folder permissions to a user&amp;#39;s calendar 13Get-MailboxFolderPermission -Identity target@company.com:\Calendar I haven&#39;t tested these since 2021:
1# Connect to Exchage 2Import-Module ExchangeOnlineManagement 3Connect-ExchangeOnline -UserPrincipalName &amp;lt;UPN&amp;gt; 4 5# Get a list of all mailbox aliases 6# Source: https://docs.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Managing Auto-Expanding Archives</title>
      <link>https://trimad.github.io/post/2021-07-06-manage-auto-expanding-archives/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2021-07-06-manage-auto-expanding-archives/</guid>
      <description>
        
          
            Managing auto-expanding archives via the ExchangeOnlineManagement module is a pain in my ass. This Github Gist is an aggregate of scripts I&#39;ve written that allow me to administrate this mailbox feature effectively.
          
          
        
      </description>
    </item>
    
    <item>
      <title>k-means Clustering</title>
      <link>https://trimad.github.io/post/2021-05-18-k-means-clustering/</link>
      <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2021-05-18-k-means-clustering/</guid>
      <description>
        
          
            _k-means clustering_ is a method of vector quantization, originally from signal processing, that aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean (cluster centers or cluster centroid), serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Windows 10/11 ms-settings URI Scheme Reference</title>
      <link>https://trimad.github.io/post/2021-01-01-ms-settings-uri-reference/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2021-01-01-ms-settings-uri-reference/</guid>
      <description>
        
          
            Knowing the URI Scheme is useful because you can jump straight to specific settings menus using ðŸªŸ+R.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Remote Reboot With SMTP Status</title>
      <link>https://trimad.github.io/post/2019-08-28-remote-reboot-with-smtp-status/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-08-28-remote-reboot-with-smtp-status/</guid>
      <description>
        
          
            PowerShell script that reboots a list of computers and emails the status of the machines.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Remove-AppxPackage</title>
      <link>https://trimad.github.io/post/2019-08-28-remove-appx-packages/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-08-28-remove-appx-packages/</guid>
      <description>
        
          
            Microsoft Reference
          
          
        
      </description>
    </item>
    
    <item>
      <title>Buddhabrot</title>
      <link>https://trimad.github.io/post/2019-08-25-buddhabrot/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-08-25-buddhabrot/</guid>
      <description>
        
          
            The Buddhabrot fractal is a type of fractal that is generated by plotting the paths of points that escape from the Mandelbrot set. The resulting image resembles a series of intertwined spirals and branches, and is named after the shape it resembles, which is said to resemble the seated figure of Buddha. The Buddhabrot fractal is created by assigning each point in the complex plane a &#34;color&#34; based on how many times it takes for that point to escape from the Mandelbrot set, and then plotting the paths of the points that do escape. This process is repeated millions of times, resulting in a highly detailed and intricate fractal image.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Daily Donation Report</title>
      <link>https://trimad.github.io/post/2019-08-25-daily-donation-report/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-08-25-daily-donation-report/</guid>
      <description>
        
          
            This Google Apps Script aggregates data submitted by Google Forms, puts it in .xlsx format and sends it in an HTML formatted email.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Enable AutoAdminLogon with PowerShell</title>
      <link>https://trimad.github.io/post/2019-08-19-enable-autoadminlogon/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-08-19-enable-autoadminlogon/</guid>
      <description>
        
          
            This script was written to satisfy a niche case where I temporarily needed a PoS (Point of Sale) to automatically login upon startup using AD credentials.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Blending Textures With Open Simplex Noise</title>
      <link>https://trimad.github.io/post/2019-08-18-blending-textures-with-open-simplex-noise/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-08-18-blending-textures-with-open-simplex-noise/</guid>
      <description>
        
          
            This Processing sketch loads two images and creates an image mask that blends them together. The transparency of the image mask is determined by 4D Open Simplex Noise, which loops perfectly.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Robo Mirror</title>
      <link>https://trimad.github.io/post/2019-02-28-robo-mirror/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2019-02-28-robo-mirror/</guid>
      <description>
        
          
            This batch file utilizes robocopy to mirror a list of files contained within &amp;quot;targets.txt&amp;quot; in the same directory.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Cube Wave</title>
      <link>https://trimad.github.io/post/2018-12-30-cube-wave/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-12-30-cube-wave/</guid>
      <description>
        
          
            Here&#39;s my take on... Daniel Shiffman&#39;s take on... Beesandbomb&#39;s take on the cube wave.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Lorenz Doll</title>
      <link>https://trimad.github.io/post/2018-11-21-lorenz-doll/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-11-21-lorenz-doll/</guid>
      <description>
        
          
            In this sketch I turned every pixel of an image into a Lorenz System. I mapped the velocity of that system to the brightness value of the pixel. This was the result. Sadly, the Processing sketch I made this with is gone forever.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Barnsley Fern</title>
      <link>https://trimad.github.io/post/2018-06-28-barnsley-fern/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-06-28-barnsley-fern/</guid>
      <description>
        
          
            The Barnsley Fern is a fractal pattern named after British mathematician Michael Barnsley. It is generated by an iterative process that involves repeatedly applying a set of geometric transformations to a simple initial shape. The resulting fern-like pattern displays self-similarity at different scales, and has applications in computer graphics, image compression, and chaos theory.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Comparing Java Distance Functions</title>
      <link>https://trimad.github.io/post/2018-04-17-comparing-java-distance-functions/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-04-17-comparing-java-distance-functions/</guid>
      <description>
        
          
             Distance formula 1 execution time: 2224ms Distance formula 2 execution time: 4ms Distance formula 3 execution time: 3ms 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Ulam Spiral</title>
      <link>https://trimad.github.io/post/2018-05-17-ulam-sprial/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-05-17-ulam-sprial/</guid>
      <description>
        
          
            Launch this sketch is a new window (recommended)Launch p5.js web editorThe Ulam Spiral or prime spiral is a graphical depiction of the set of prime numbers, devised by mathematician Stanislaw Ulam in 1963 and popularized in Martin Gardner&#39;s Mathematical Games column in Scientific American a short time later. It is constructed by writing the positive integers in a square spiral and specially marking the prime numbers.
What I&#39;ve done differently is allowed for iterating every integer in the grid forwards or backwards to search for long, connected diaganal lines of prime numbers in the grid.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Kruskal&#39;s Algorithm Visualized With Processing</title>
      <link>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</guid>
      <description>
        
          
            Kruskal&#39;s algorithm is a greedy algorithm used to find the minimum spanning tree of a connected, weighted graph. The algorithm works by sorting the edges of the graph by weight, and then adding the edges to the minimum spanning tree one by one, making sure to avoid creating cycles. Kruskal&#39;s algorithm has a time complexity of O(E log E) where E is the number of edges in the graph, and is widely used in network design and optimization problems.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Demonstrating Procedures and Console Output</title>
      <link>https://trimad.github.io/post/2017-10-24-demonstrating-procedures-and-console-output/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2017-10-24-demonstrating-procedures-and-console-output/</guid>
      <description>
        
          
            This MASM program demonstrates the use of procedures (functions) as well as printing different colors to console.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes</title>
      <link>https://trimad.github.io/post/2017-10-17-sieve-of-eratosthenes/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2017-10-17-sieve-of-eratosthenes/</guid>
      <description>
        
          
            This is my first attempt a prime sieve in assembly. It is largely a direct translation from a Sieve of Eratosthenes originally written in Java, so this program is not exactly optimally structured. Firstly, it stores all primes up to n in an array. Secondly, it counts the number of primes before n and stores that hexadecimal value in the EAX register. This is rough. There is much room for improvement, and I intend to revisit this program without using the MUL function. 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Nth Fibonacci Number</title>
      <link>https://trimad.github.io/post/2017-10-07-nth-fibonacci-number/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2017-10-07-nth-fibonacci-number/</guid>
      <description>
        
          
            This is my first x86 MASM program. As the title states, this program outputs a Fibonacci number that corresponds to an input value of n. I&#39;m not happy with its current state because it is constantly swapping between the memory and registers.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Counting Sort</title>
      <link>https://trimad.github.io/post/2017-07-18-counting-sort/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2017-07-18-counting-sort/</guid>
      <description>
        
          
            Counting sort is a non-comparison based sorting algorithm that works by determining, for each element in an input array, the number of elements that are less than it. This information is then used to place the element in its correct position in the output array. The algorithm has a linear time complexity of O(n+k), where n is the number of elements in the input array and k is the range of values in the input array.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Simple 2D Terrain Generation Using Perlin Noise</title>
      <link>https://trimad.github.io/post/2017-07-16-simple-2d-perlin-noise/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2017-07-16-simple-2d-perlin-noise/</guid>
      <description>
        
          
            This sketch maps perlin noise between a value of 0 and 255 across a grid. Values greater than or equal to 100 are &#34;grass&#34;, values between 75 and 100 are &#34;sand&#34;, and values less than or equal to 75 are &#34;water&#34;.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://trimad.github.io/post/2016-12-13-arrays/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2016-12-13-arrays/</guid>
      <description>
        
          
            This is something I made when I was learning about Arrays of Objects.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
