<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>video on Hugo Grimoire</title>
    <link>https://trimad.github.io/tags/video/</link>
    <description>Recent content in video on Hugo Grimoire</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 05 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/tags/video/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FILM</title>
      <link>https://trimad.github.io/post/2023-02-10-film/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-10-film/</guid>
      <description>
        
          
            GitHub RepositorySetup GPU environmentThe Windows setup instructions in the GitHub repository are wrong or outdated. Tensorflow kept trying to use the CPU instead of the GPU until I installed CUDA and CUDNN this way:1conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0 2python -m pip install &amp;#34;tensorflow&amp;lt;2.11&amp;#34; 3pip install protobuf==3.20.3 UsageActivate the Conda environment:
1conda activate frame_interpolation From the Conda Shell, cd to the FILM directory:
1cd C:\Users\trima\frame-interpolation Open File Explorer at this directory and copy the frames you want to interpolate to the &amp;quot;photos&amp;quot; folder.
          
          
        
      </description>
    </item>
    
    <item>
      <title>MiDaS</title>
      <link>https://trimad.github.io/post/2023-02-10-midas/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-10-midas/</guid>
      <description>
        
          
            GitHub RepositoryDuring installation, I ran into an issue where the CUDA package wasn&#39;t found. Had to modify environment.yaml to:
1name: midas-py310 2channels: 3 - pytorch 4 - defaults 5dependencies: 6 - nvidia::cuda-toolkit=11.7.0 7 - python=3.10.8 8 - pytorch::pytorch=1.13.0 9 - torchvision=0.14.0 10 - pip=22.3.1 11 - numpy=1.23.4 12 - pip: 13 - opencv-python==4.6.0.66 14 - imutils==0.5.4 15 - timm==0.6.12 16 - einops==0.6.0 Commands that were helpful for troubleshooting CUDA:
          
          
        
      </description>
    </item>
    
    <item>
      <title>Stable Diffusion Scripts</title>
      <link>https://trimad.github.io/post/2023-02-05-stable-diffusion/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2023-02-05-stable-diffusion/</guid>
      <description>
        
          
            Stable Diffusion is an image generation technique that uses a diffusion process to iteratively generate images. It starts with a noise image and applies a series of transformations to it, where each transformation adds a little bit of noise to the image. These transformations are repeated over multiple time steps, and the amount of noise added is gradually decreased over time. This process smooths out the noise and generates a high-quality image. The stability of the diffusion process is maintained by scaling the added noise based on the image&#39;s current state, preventing the image from diverging or collapsing into a uniform color. Stable Diffusion is a powerful and versatile image generation technique that can produce realistic, high-resolution images with fine details and a wide range of styles.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ffmpeg</title>
      <link>https://trimad.github.io/post/2022-01-27-ffmpeg/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trimad.github.io/post/2022-01-27-ffmpeg/</guid>
      <description>
        
          
            ffmpeg is a complete, cross-platform solution to record, convert and stream audio and video.
ffmpeg Downloadffmpeg DocumentationAudio Processing Convert to 8kHz, single-channel PCM 1ffmpeg -i &amp;#34;input.mp3&amp;#34; -ar 8000 -ac 1 output.wav Convert to 16kHz, single-channel PCM 1ffmpeg -i &amp;#34;input.mp3&amp;#34; -ar 16000 -ac 1 output.wav Convert to 48kHz, single-channel PCM 1ffmpeg -i input.mp3 -ar 48000 -ac 1 output.wav Video Processing Add Music to a Video 1ffmpeg -i video.mp4 -i music.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
