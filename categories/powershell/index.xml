<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on Hugo Grimoire</title><link>https://trimad.github.io/categories/powershell/</link><description>Recent content in PowerShell on Hugo Grimoire</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 23 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/categories/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Microsoft LAPS (Local Administrator Password Solution)</title><link>https://trimad.github.io/post/2023-02-23-laps/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-23-laps/</guid><description>
Microsoft LAPS (Local Administrator Password Solution) is a tool designed to securely manage local administrator account passwords on Windows domain-joined computers. It automates password generation and rotation, and stores passwords in a secure manner, providing greater control and security over local accounts.</description></item><item><title>MicrosoftTeams PowerShell module</title><link>https://trimad.github.io/post/2023-02-23-microsoftteams/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-23-microsoftteams/</guid><description>
PowerShell scripts for Microsoft Teams stuff.</description></item><item><title>Force domain controller to sync with AzureAD</title><link>https://trimad.github.io/post/2023-02-09-force-ad-sync/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-09-force-ad-sync/</guid><description>
PowerShell script that forces an AD sync with AzureAD</description></item><item><title>All About Time</title><link>https://trimad.github.io/post/2023-02-02-all-about-time/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-02-all-about-time/</guid><description>
The first command, &amp;quot;wmic path Win32_OperatingSystem get LastBootUpTime&amp;quot;, is a Windows Management Instrumentation (WMI) command that retrieves the time the operating system was last booted. The second command, &amp;quot;systeminfo | find &amp;quot;System Boot Time&amp;quot;&amp;quot;, is a Windows Command Prompt command that uses the systeminfo command to retrieve system information, which is then piped (|) to the find command to search for the specific line containing &amp;quot;System Boot Time&amp;quot;. The third command, &amp;quot;(get-date) - (gcim Win32_OperatingSystem).</description></item><item><title>Dump WiFi Passwords</title><link>https://trimad.github.io/post/2022-04-11-dump-wifi-passwords/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-04-11-dump-wifi-passwords/</guid><description>
This script uses the Windows command-line tool &amp;quot;netsh&amp;quot; to retrieve information about wireless network profiles that have been previously connected to on the computer. It then parses the information to extract the SSID (name) and password for each profile, and outputs that information to a CSV file named &amp;quot;output.csv&amp;quot;. Finally, the script opens the &amp;quot;output.csv&amp;quot; file.
The script uses the &amp;quot;Invoke-Item&amp;quot; command to open the &amp;quot;output.csv&amp;quot; file, which is the PowerShell command equivalent of double-clicking on a file in Windows Explorer.</description></item><item><title>Combining PowerShell Cmdlets</title><link>https://trimad.github.io/post/2021-11-17-combining-powershell-cmdlets/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-11-17-combining-powershell-cmdlets/</guid><description>
I found myself in a situation where I needed to generate a report to troubleshoot an email issue for a client. Some data could only be retrieved from the ExchangeOnlineManagement module, and other data only from the AzureAD module. This PowerShell script demonstrates one solution of using both modules in tandem with a nested for-loop that compares the UserPrincipalName with every iteration.</description></item><item><title>Active Directory Group Membership</title><link>https://trimad.github.io/post/2021-09-16-active-directory-group-membership/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-09-16-active-directory-group-membership/</guid><description>
This PowerShell script generates a report showing all groups and group members when run on an on-premises domain controller. The script requires that you import the ActiveDirectory module. The report is in .csv format so the rows may need some manipulation to see all the members if you're opening it in Excel.</description></item><item><title>Managing Exchange Calendars</title><link>https://trimad.github.io/post/2021-09-16-manage-exchange-online-calendars/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-09-16-manage-exchange-online-calendars/</guid><description>
1#If not installed already 2Install-Module ExchangeOnlineManagement 3#Import 4Import-Module ExchangeOnlineManagement 5#Connect 6Connect-ExchangeOnline -UserPrincipalName &amp;lt;UPN&amp;gt; 7 8# Remove AccessRights from a user 9Remove-MailboxFolderPermission -Identity target@company.com:\Calendar -User user@company.com 10# Grant AccessRights to a user 11Add-MailboxFolderPermission -Identity target@company.com:\Calendar -User user@company.com -AccessRights Owner 12# See who currently has folder permissions to a user&amp;#39;s calendar 13Get-MailboxFolderPermission -Identity target@company.com:\Calendar I haven't tested these since 2021:
1# Connect to Exchage 2Import-Module ExchangeOnlineManagement 3Connect-ExchangeOnline -UserPrincipalName &amp;lt;UPN&amp;gt; 4 5# Get a list of all mailbox aliases 6# Source: https://docs.</description></item><item><title>Managing Auto-Expanding Archives</title><link>https://trimad.github.io/post/2021-07-06-manage-auto-expanding-archives/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-07-06-manage-auto-expanding-archives/</guid><description>
Managing auto-expanding archives via the ExchangeOnlineManagement module is a pain in my ass. This Github Gist is an aggregate of scripts I've written that allow me to administrate this mailbox feature effectively.</description></item><item><title>Remote Reboot With SMTP Status</title><link>https://trimad.github.io/post/2019-08-28-remote-reboot-with-smtp-status/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-28-remote-reboot-with-smtp-status/</guid><description>
PowerShell script that reboots a list of computers and emails the status of the machines.</description></item><item><title>Remove-AppxPackage</title><link>https://trimad.github.io/post/2019-08-28-remove-appx-packages/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-28-remove-appx-packages/</guid><description>
Microsoft Reference</description></item><item><title>Enable AutoAdminLogon with PowerShell</title><link>https://trimad.github.io/post/2019-08-19-autoadminlogon/</link><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-19-autoadminlogon/</guid><description>
This script was written to satisfy a niche case where I temporarily needed a PoS (Point of Sale) to automatically login upon startup using AD credentials.</description></item></channel></rss>