<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on Hugo Grimoire</title><link>https://trimad.github.io/categories/powershell/</link><description>Recent content in PowerShell on Hugo Grimoire</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 30 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/categories/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>User Lockout Report</title><link>https://trimad.github.io/post/2024-05-30-user-lockout-report/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2024-05-30-user-lockout-report/</guid><description>
This PowerShell script generates an HTML diagnostics report for user lockouts in the Active Directory. The script imports the Active Directory module and retrieves all user accounts that are not disabled. It fetches password-related properties and calculates the password age and expiration details for each user. The results are filtered, sorted, and converted into an HTML report with CSS styling for better readability. The final HTML report is saved to a file and opened in the default web browser.</description></item><item><title>Take Control</title><link>https://trimad.github.io/post/2024-01-02-take-control/</link><pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2024-01-02-take-control/</guid><description>
Steps to take when Take Control isn't working.</description></item><item><title>PSWindowsUpdate</title><link>https://trimad.github.io/post/2023-10-10-pswindowsupdate/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-10-10-pswindowsupdate/</guid><description>
Install Windows Updates with the PSWindowsUpdate PowerShell module.</description></item><item><title>Mapping Network Drives Using PowerShell and SID</title><link>https://trimad.github.io/post/2023-07-20-mapped-drives/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-07-20-mapped-drives/</guid><description>
This blog post discusses a PowerShell script that can map a network drive using a Security Identifier (SID), even without being logged in as that user.</description></item><item><title>Join a Workstation to Active Directory with Shell and PowerShell</title><link>https://trimad.github.io/post/2023-07-13-join-active-directory/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-07-13-join-active-directory/</guid><description>
This post presents one-liner commands using Shell and PowerShell to add a workstation to Active Directory.</description></item><item><title>ACL</title><link>https://trimad.github.io/post/2023-05-02-acl/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-05-02-acl/</guid><description>
A collection of PowerShell scripts useful for managing the Access Control List (ACL)</description></item><item><title>Hiding users from GAL</title><link>https://trimad.github.io/post/2023-04-05-hiding-users-from-gal/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-04-05-hiding-users-from-gal/</guid><description>
Scripts for hiding users from the Global Address List</description></item><item><title>Windows Remediation</title><link>https://trimad.github.io/post/2023-03-03-windows-remediation/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-03-03-windows-remediation/</guid><description>
Useful tools for when that got dang Windows just ain't acting right. ðŸ˜¤</description></item><item><title>Microsoft LAPS (Local Administrator Password Solution)</title><link>https://trimad.github.io/post/2023-02-22-laps/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-22-laps/</guid><description>
Microsoft LAPS (Local Administrator Password Solution) is a tool designed to securely manage local administrator account passwords on Windows domain-joined computers. It automates password generation and rotation, and stores passwords in a secure manner, providing greater control and security over local accounts.</description></item><item><title>MicrosoftTeams PowerShell module</title><link>https://trimad.github.io/post/2023-02-23-microsoftteams/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-23-microsoftteams/</guid><description>
PowerShell scripts for Microsoft Teams stuff.</description></item><item><title>Force domain controller to sync with AzureAD</title><link>https://trimad.github.io/post/2023-02-09-force-ad-sync/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-09-force-ad-sync/</guid><description>
PowerShell script that forces an AD sync with AzureAD</description></item><item><title>Handling Hacked Accounts and Purging Emails in M365</title><link>https://trimad.github.io/post/2023-02-07-purge-emails/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-07-purge-emails/</guid><description>
This blog post is an evolving work flow for managing hacked accounts using the ExchangeOnlineManagement PowerShell module. I'll share my personal experiences using PowerShell, particularly focusing on remediation techniques like purging phishing emails and securing compromised accounts.</description></item><item><title>Mastering Time with Shell and PowerShell</title><link>https://trimad.github.io/post/2023-02-02-mastering-time-with-shell-and-powershell/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-02-mastering-time-with-shell-and-powershell/</guid><description>
Discover an array of shell and PowerShell commands related to time management, such as checking the last boot-up time, system boot time, and changing the time zone.</description></item><item><title>Dump WiFi Passwords</title><link>https://trimad.github.io/post/2022-04-11-dump-wifi-passwords/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-04-11-dump-wifi-passwords/</guid><description>
This script uses the Windows command-line tool &amp;quot;netsh&amp;quot; to retrieve information about wireless network profiles that have been previously connected to on the computer. It then parses the information to extract the SSID (name) and password for each profile, and outputs that information to a CSV file named &amp;quot;output.csv&amp;quot;. Finally, the script opens the &amp;quot;output.csv&amp;quot; file.
The script uses the &amp;quot;Invoke-Item&amp;quot; command to open the &amp;quot;output.csv&amp;quot; file, which is the PowerShell command equivalent of double-clicking on a file in Windows Explorer.</description></item><item><title>Combining PowerShell Cmdlets</title><link>https://trimad.github.io/post/2021-11-17-combining-powershell-cmdlets/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-11-17-combining-powershell-cmdlets/</guid><description>
I found myself in a situation where I needed to generate a report to troubleshoot an email issue for a client. Some data could only be retrieved from the ExchangeOnlineManagement module, and other data only from the AzureAD module. This PowerShell script demonstrates one solution of using both modules in tandem with a nested for-loop that compares the UserPrincipalName with every iteration.</description></item><item><title>Get Group Membership</title><link>https://trimad.github.io/post/2021-09-16-active-directory-group-membership/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-09-16-active-directory-group-membership/</guid><description>
Scripts useful for getting group membership. Run them from an admin-elevated Windows PowerShell ISE script pane.
ActiveDirectory 1# Import the Active Directory PowerShell module to provide cmdlets for AD operations 2Import-Module ActiveDirectory 3 4# Get all Active Directory groups, sorted by name. The -filter * returns all groups. 5$groups = (Get-ADGroup -filter * | Sort Name) 6 7# Store the total number of groups for progress tracking 8$totalgroups = $groups.Count 9 10# Initialize a counter for tracking the current group number 11$i = 1 12 13# Initialize an empty array to hold the output data 14$output = @() 15 16# Loop through each group 17foreach ($group in $groups) { 18 # Increment the counter 19 $i++ 20 # Display the current processing progress in the console 21 Write-Progress -activity &amp;#34;Processing $($group.</description></item><item><title>Managing Exchange Calendars</title><link>https://trimad.github.io/post/2021-09-16-manage-exchange-online-calendars/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-09-16-manage-exchange-online-calendars/</guid><description>
1#If not installed already 2Install-Module ExchangeOnlineManagement 3#Import 4Import-Module ExchangeOnlineManagement 5#Connect 6Connect-ExchangeOnline -UserPrincipalName &amp;lt;UPN&amp;gt; 7 8# Remove AccessRights from a user 9Remove-MailboxFolderPermission -Identity target@company.com:\Calendar -User user@company.com 10# Grant AccessRights to a user 11Add-MailboxFolderPermission -Identity target@company.com:\Calendar -User user@company.com -AccessRights Owner 12# See who currently has folder permissions to a user&amp;#39;s calendar 13Get-MailboxFolderPermission -Identity target@company.com:\Calendar I haven't tested these since 2021:
1# Connect to Exchage 2Import-Module ExchangeOnlineManagement 3Connect-ExchangeOnline -UserPrincipalName &amp;lt;UPN&amp;gt; 4 5# Get a list of all mailbox aliases 6# Source: https://docs.</description></item><item><title>Managing Auto-Expanding Archives</title><link>https://trimad.github.io/post/2021-07-06-manage-auto-expanding-archives/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-07-06-manage-auto-expanding-archives/</guid><description>
Managing auto-expanding archives via the ExchangeOnlineManagement module is a pain in my ass. This Github Gist is an aggregate of scripts I've written that allow me to administrate this mailbox feature effectively.</description></item><item><title>Remote Reboot With SMTP Status</title><link>https://trimad.github.io/post/2019-08-28-remote-reboot-with-smtp-status/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-28-remote-reboot-with-smtp-status/</guid><description>
PowerShell script that reboots a list of computers and emails the status of the machines.</description></item><item><title>Remove-AppxPackage</title><link>https://trimad.github.io/post/2019-08-28-remove-appx-packages/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-28-remove-appx-packages/</guid><description>
Microsoft Reference</description></item><item><title>Enable AutoAdminLogon with PowerShell</title><link>https://trimad.github.io/post/2019-08-19-enable-autoadminlogon/</link><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-19-enable-autoadminlogon/</guid><description>
This script was written to satisfy a niche case where I temporarily needed a PoS (Point of Sale) to automatically login upon startup using AD credentials.</description></item></channel></rss>