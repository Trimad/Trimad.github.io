<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Hugo Grimoire</title><link>https://trimad.github.io/categories/java/</link><description>Recent content in Java on Hugo Grimoire</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Logistic Map</title><link>https://trimad.github.io/post/2022-05-14-logistic-map/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-05-14-logistic-map/</guid><description>
The logistic map is a mathematical model used to describe the population growth of a species over time. It is a simple equation that takes into account the effects of limited resources and environmental factors on population growth. The logistic map produces a pattern of population growth that exhibits chaotic behavior as the values of the model's parameters change, making it a valuable tool for studying complex systems.</description></item><item><title>k-means Clustering</title><link>https://trimad.github.io/post/2021-05-18-k-means-clustering/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-05-18-k-means-clustering/</guid><description>
_k-means clustering_ is a method of vector quantization, originally from signal processing, that aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean (cluster centers or cluster centroid), serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.</description></item><item><title>Buddhabrot</title><link>https://trimad.github.io/post/2019-08-25-buddhabrot/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-25-buddhabrot/</guid><description>
The Buddhabrot fractal is a type of fractal that is generated by plotting the paths of points that escape from the Mandelbrot set. The resulting image resembles a series of intertwined spirals and branches, and is named after the shape it resembles, which is said to resemble the seated figure of Buddha. The Buddhabrot fractal is created by assigning each point in the complex plane a "color" based on how many times it takes for that point to escape from the Mandelbrot set, and then plotting the paths of the points that do escape. This process is repeated millions of times, resulting in a highly detailed and intricate fractal image.</description></item><item><title>Blending Textures With Open Simplex Noise</title><link>https://trimad.github.io/post/2019-08-18-blending-textures-with-open-simplex-noise/</link><pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-18-blending-textures-with-open-simplex-noise/</guid><description>
This Processing sketch loads two images and creates an image mask that blends them together. The transparency of the image mask is determined by 4D Open Simplex Noise, which loops perfectly.</description></item><item><title>Cube Wave</title><link>https://trimad.github.io/post/2018-12-30-cube-wave/</link><pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-12-30-cube-wave/</guid><description>
Here's my take on... Daniel Shiffman's take on... Beesandbomb's take on the cube wave.</description></item><item><title>Lorenz Doll</title><link>https://trimad.github.io/post/2018-11-21-lorenz-doll/</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-11-21-lorenz-doll/</guid><description>
In this sketch I turned every pixel of an image into a Lorenz System. I mapped the velocity of that system to the brightness value of the pixel. This was the result. Sadly, the Processing sketch I made this with is gone forever.</description></item><item><title>Barnsley Fern</title><link>https://trimad.github.io/post/2018-06-28-barnsley-fern/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-06-28-barnsley-fern/</guid><description>
The Barnsley Fern is a fractal pattern named after British mathematician Michael Barnsley. It is generated by an iterative process that involves repeatedly applying a set of geometric transformations to a simple initial shape. The resulting fern-like pattern displays self-similarity at different scales, and has applications in computer graphics, image compression, and chaos theory.</description></item><item><title>Comparing Java Distance Functions</title><link>https://trimad.github.io/post/2018-04-17-comparing-java-distance-functions/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-04-17-comparing-java-distance-functions/</guid><description>
Distance formula 1 execution time: 2224ms Distance formula 2 execution time: 4ms Distance formula 3 execution time: 3ms</description></item><item><title>UVa Online Judge Challenge "11045"</title><link>https://trimad.github.io/post/2018-05-01-uva-11045/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-05-01-uva-11045/</guid><description>
This is a maximum flow problem on a bipartite graph. I created the flow chart above to visualize the 3 test cases. The virtual judge run time was 0.18s.</description></item><item><title>Kruskal's Algorithm Visualized With Processing</title><link>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</guid><description>
Kruskal's algorithm is a greedy algorithm used to find the minimum spanning tree of a connected, weighted graph. The algorithm works by sorting the edges of the graph by weight, and then adding the edges to the minimum spanning tree one by one, making sure to avoid creating cycles. Kruskal's algorithm has a time complexity of O(E log E) where E is the number of edges in the graph, and is widely used in network design and optimization problems.</description></item><item><title>UVa Online Judge Challenge "10550"</title><link>https://trimad.github.io/post/2017-11-09-uva-10550/</link><pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-11-09-uva-10550/</guid><description>
"Now that you’re back to school for another term, you need to remember how to work the combination lock on your locker. A common design is that of the Master Brand, shown at right. The lock has a dial with 40 calibration marks numbered 0 to 39. A combination consists of 3 of these numbers; for example: 15-25-8. To open the lock, the following steps are taken..."</description></item><item><title>UVa Online Judge Challenge "272"</title><link>https://trimad.github.io/post/2017-10-17-uva-272/</link><pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-10-17-uva-272/</guid><description>
"TEX is a typesetting language developed by Donald Knuth. It takes source text together with a few typesetting instructions and produces, one hopes, a beautiful document. Beautiful documents use..."</description></item><item><title>UVa Online Judge Challenge "100"</title><link>https://trimad.github.io/post/2017-10-05-uva-100/</link><pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-10-05-uva-100/</guid><description>
"Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs. Consider the following algorithm..."</description></item><item><title>UVa Online Judge Challenge "10110"</title><link>https://trimad.github.io/post/2017-10-05-uva-10110/</link><pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-10-05-uva-10110/</guid><description>
"There is man named ”mabu” for switching on-off light in our University. He switches on-off the lights in a corridor. Every bulb has its own toggle switch. That is, if it is pressed then the bulb turns on. Another press will turn it off. To save power consumption (or may be he is mad or something else) he does a peculiar thing. If in a corridor there is n bulbs, he walks along the corridor back and forth n times and in i-th walk he toggles only the switches whose serial is divisable by i. He does not press any switch when coming back to his initial position. A i-th walk is defined as going down the corridor (while doing the peculiar thing) and coming back again. Now you have to determine what is the final condition of the last bulb. Is it on or off?"</description></item><item><title>Kattis Challenge "Parking"</title><link>https://trimad.github.io/post/2017-09-15-kattis-parking2/</link><pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-09-15-kattis-parking2/</guid><description>
"When shopping on Long Street, Michael usually parks his car at some random location, and then walks to the stores he needs. Can you help Michael choose a place to park which minimises the distance he needs to walk on his shopping round? Long Street is a straight line, where all positions are integer. You pay for parking in a specific slot, which is an integer position on Long Street. Michael does not want to pay for more than one parking though. He is very strong, and does not mind carrying all the bags around."</description></item><item><title>Kattis Challenge "Sum of Others"</title><link>https://trimad.github.io/post/2017-09-15-kattis-sum-of-others/</link><pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-09-15-kattis-sum-of-others/</guid><description>
"Every day, your job requires you to add up long lists of integers, like the following:
3 + 2 + -4 + 8 + 3 + -6 + 1 + 4 + 6 + -1 + -6 = 10
That is, a sum of positive and negative integers, followed by an equals sign, followed by a single integer. To save yourself some time, you normally leave out the and signs as you write down your work, so the previous example would be..."</description></item><item><title>UVa Online Judge Challenge "11172"</title><link>https://trimad.github.io/post/2017-08-24-uva-11172/</link><pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-08-24-uva-11172/</guid><description>
"Some operators checks about the relationship between two values and these operators are called relational operators. Given two numerical values your job is just to find out the relationship between them that is (i) First one is greater than the second (ii) First one is less than the second or (iii) First and second one is equal."</description></item><item><title>Kattis Challenge "Line Them Up"</title><link>https://trimad.github.io/post/2017-08-18-kattis-line-them-up/</link><pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-08-18-kattis-line-them-up/</guid><description>
"An eccentric coach asks players on the team to line up alphabetically at the start of practice. The coach does not tell the players whether they need to line up in increasing or decreasing order, so they guess. If they guess wrong, the coach makes them run laps before practice. Given a list of names, you are to determine if the list is in increasing alphabetical order, decreasing alphabetical order or neither."</description></item><item><title>Kattis Challenge "Server"</title><link>https://trimad.github.io/post/2017-08-18-kattis-server/</link><pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-08-18-kattis-server/</guid><description>
"You are in charge of a server that needs to run some submitted tasks on a first-come, first-served basis. Each day, you can dedicate the server to run these tasks for at most minutes. Given the time each task takes, you want to know how many of them will be finished today."</description></item><item><title>Kattis Challenge "A Different Problem"</title><link>https://trimad.github.io/post/2017-08-15-kattis-different/</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-08-15-kattis-different/</guid><description>
"Write a program that computes the difference between non-negative integers."</description></item><item><title>Counting Sort</title><link>https://trimad.github.io/post/2017-07-18-counting-sort/</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-07-18-counting-sort/</guid><description>
Counting sort is a non-comparison based sorting algorithm that works by determining, for each element in an input array, the number of elements that are less than it. This information is then used to place the element in its correct position in the output array. The algorithm has a linear time complexity of O(n+k), where n is the number of elements in the input array and k is the range of values in the input array.</description></item></channel></rss>