<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shell on Hugo Grimoire</title><link>https://trimad.github.io/categories/shell/</link><description>Recent content in Shell on Hugo Grimoire</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 25 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/categories/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Public IP</title><link>https://trimad.github.io/post/2024-06-24-get-public-ip/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2024-06-24-get-public-ip/</guid><description>
Different methods of obtaining the public IP address of a computer.</description></item><item><title>Mapping Network Drives Using PowerShell and SID</title><link>https://trimad.github.io/post/2023-07-20-mapped-drives/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-07-20-mapped-drives/</guid><description>
This blog post discusses a PowerShell script that can map a network drive using a Security Identifier (SID), even without being logged in as that user.</description></item><item><title>Join a Workstation to Active Directory with Shell and PowerShell</title><link>https://trimad.github.io/post/2023-07-13-join-active-directory/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-07-13-join-active-directory/</guid><description>
This post presents one-liner commands using Shell and PowerShell to add a workstation to Active Directory.</description></item><item><title>Deep Floyd IF</title><link>https://trimad.github.io/post/2023-05-03-deep-floyd-if/</link><pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-05-03-deep-floyd-if/</guid><description>
My tentative work flow for running Deep Floyd IF locally for image generation.</description></item><item><title>net use</title><link>https://trimad.github.io/post/2023-04-13-net-use/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-04-13-net-use/</guid><description>
Connects a computer to or disconnects a computer from a shared resource, or displays information about computer connections. The command also controls persistent net connections. Used without parameters, net use retrieves a list of network connections.</description></item><item><title>Windows Remediation</title><link>https://trimad.github.io/post/2023-03-03-windows-remediation/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-03-03-windows-remediation/</guid><description>
Useful tools for when that got dang Windows just ain't acting right. 😤</description></item><item><title>Windows Defender Firewall</title><link>https://trimad.github.io/post/2023-03-03-windows-defender-firewall/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-03-03-windows-defender-firewall/</guid><description>
Examples of rules are commonly used in network setups where specific programs or ports need to be allowed through the firewall to ensure that they can communicate with other devices or software.</description></item><item><title>net user</title><link>https://trimad.github.io/post/2023-02-21-net-user/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-21-net-user/</guid><description>
The "net user" command is a Command Prompt (Shell) command used to manage user accounts on a Windows operating system. It can be used to create, modify, or delete user accounts, as well as to change passwords and manage group memberships.</description></item><item><title>Uninstall Third-Party Drivers with CMD</title><link>https://trimad.github.io/post/2023-02-17-uninstall-drivers/</link><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-17-uninstall-drivers/</guid><description>
&lt;p>You can uninstall third-party drivers (such as the WAVES MaxxAudio Pro driver) from the Command Prompt (CMD) by using the &amp;quot;pnputil.exe&amp;quot; utility. Here's the basic process:&lt;/p>
&lt;p>Open Command Prompt as administrator: Press the Windows key + X, and then select &amp;quot;Command Prompt (Admin)&amp;quot;.&lt;/p>
&lt;p>Type the following command and press Enter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">pnputil.exe -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="c1"># or export the list to a file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">pnputil.exe -e &amp;gt; !drivers.csv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command lists all the third-party drivers installed on your system.&lt;/p></description></item><item><title>Mastering Time with Shell and PowerShell</title><link>https://trimad.github.io/post/2023-02-02-mastering-time-with-shell-and-powershell/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2023-02-02-mastering-time-with-shell-and-powershell/</guid><description>
Discover an array of shell and PowerShell commands related to time management, such as checking the last boot-up time, system boot time, and changing the time zone.</description></item><item><title>Download Streams</title><link>https://trimad.github.io/post/2022-06-09-download-streams/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-06-09-download-streams/</guid><description>
&lt;p>This is my tentative work flow for downloading movie streams online. The gist of what I've learned about this process is that every HTTP Live Stream (HLS) begins with an &lt;code>.m3u8&lt;/code> playlist with a MIME type of &lt;code>x-mpegURL&lt;/code> or &lt;code>vnd.apple.mpegURL&lt;/code>. This playlist lists a series of .ts files that are streamed one at a time and decoded so your browser is not burdened with downloading the entire movie every time you refresh the page. These .ts files can also be aggregated and assembled into a video.&lt;/p></description></item><item><title>NVIDIA Maxine Windows Audio Effects SDK</title><link>https://trimad.github.io/post/2022-04-20-using-the-nvidia-maxine-audio-effects-sdk-demo/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-04-20-using-the-nvidia-maxine-audio-effects-sdk-demo/</guid><description>
This is my tentative workflow for cleaning-up poor audio using the NVIDIA Maxine Windows Audio Effects SDK.</description></item><item><title>Download YouTube Videos</title><link>https://trimad.github.io/post/2022-04-16-downloading-youtube-videos/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-04-16-downloading-youtube-videos/</guid><description>
&lt;h2>yt-dlp&lt;/h2>
yt-dlp is a free and open-source command-line tool for downloading videos and audio from YouTube and other video hosting sites. It is a fork of youtube-dl with additional features and improvements, including better performance and more frequent updates. Unlike youtube-dl, which has faced various legal challenges and takedowns, yt-dlp is actively maintained and regularly updated to ensure compatibility with the latest changes in video hosting sites.
&lt;h3>&lt;a href="https://github.com/yt-dlp/yt-dlp">GitHub Repository&lt;/a> &lt;/h3>
&lt;h3>&lt;a href="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe">Download the Windows executable&lt;/a>&lt;/h3>
&lt;p>&lt;em>Download a YouTube video with default settings:&lt;/em>&lt;/p></description></item><item><title>Record Desktop Silently</title><link>https://trimad.github.io/post/2022-02-09-record-desktop-silently/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-02-09-record-desktop-silently/</guid><description>
&lt;p>Place these 3 files in any directory and run update.vbs to begin recording a Windows session silently.&lt;/p>
&lt;h2>&lt;a href="https://github.com/Trimad/RecordDesktopSilently">Github Repository&lt;/a>&lt;/h2>
&lt;h2 id="updateexe">update.exe&lt;/h2>
&lt;ul>
&lt;li>This file is just ffmpeg that's been renamed to be slightly more inconspicuous in Task Manager.&lt;/li>
&lt;/ul>
&lt;h2 id="updatebat">update.bat&lt;/h2>
&lt;ul>
&lt;li>There are two lines to this batch file. The first line deletes &amp;quot;output.mp4&amp;quot; if it already exists in the same directory.&lt;/li>
&lt;li>The framerate in frames per second of the recording is set here following the &amp;quot;-framerate&amp;quot; flag&lt;/li>
&lt;li>The amount of time in seconds to record is set here following the &amp;quot;-t&amp;quot; flag&lt;/li>
&lt;li>output.mp4 will be saved in the same directory after the specified amount of recording time is up.&lt;/li>
&lt;/ul>
&lt;h2 id="updatevbs">update.vbs&lt;/h2>
&lt;ul>
&lt;li>This Visual Basic script runs udpate.bat without a visible command prompt.&lt;/li>
&lt;/ul></description></item><item><title>ffmpeg</title><link>https://trimad.github.io/post/2022-01-27-ffmpeg/</link><pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-01-27-ffmpeg/</guid><description>
&lt;p>ffmpeg is a complete, cross-platform solution to record, convert and stream audio and video.&lt;/p>
&lt;h2>&lt;a href="https://www.ffmpeg.org/download.html#build-windows">ffmpeg Download&lt;/a>&lt;/h2>
&lt;h2>&lt;a href="https://ffmpeg.org/ffmpeg.html">ffmpeg Documentation
&lt;/a>&lt;/h2>
&lt;h2 id="audio-processing">Audio Processing&lt;/h2>
&lt;h3 id="convert-to-8khz-single-channel-pcm">Convert to 8kHz, single-channel PCM&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i &lt;span class="s2">&amp;#34;input.mp3&amp;#34;&lt;/span> -ar &lt;span class="m">8000&lt;/span> -ac &lt;span class="m">1&lt;/span> output.wav
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="convert-to-16khz-single-channel-pcm">Convert to 16kHz, single-channel PCM&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i &lt;span class="s2">&amp;#34;input.mp3&amp;#34;&lt;/span> -ar &lt;span class="m">16000&lt;/span> -ac &lt;span class="m">1&lt;/span> output.wav
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="convert-to-48khz-single-channel-pcm">Convert to 48kHz, single-channel PCM&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i input.mp3 -ar &lt;span class="m">48000&lt;/span> -ac &lt;span class="m">1&lt;/span> output.wav
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="video-processing">Video Processing&lt;/h2>
&lt;h3 id="add-music-to-a-video">Add Music to a Video&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video.mp4 -i music.mp3 -codec copy -shortest output.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>-i video.mp4&lt;/dt>
&lt;dd>Select “video.mp4” as an input file from the same directory.&lt;/dd>
&lt;dt>-i music.mp3&lt;/dt>
&lt;dd>Select “music.mp4” as an input file from the same directory.&lt;/dd>
&lt;dt>-codec copy&lt;/dt>
&lt;dd>Specifies that we are not re-encoding anything.&lt;/dd>
&lt;dt>-shortest&lt;/dt>
&lt;dd>Use this flag if the video length is shorter than the audio length. Otherwise, use no flag at all here.&lt;/dd>
&lt;/dl>
&lt;h3 id="assemble-images-into-a-video">Assemble images into a video&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -framerate &lt;span class="m">60&lt;/span> -s 2560x1440 -i %04d.png output.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>-framerate 60&lt;/dt>
&lt;dd>Set the frame rate to 60FPS.&lt;/dd>
&lt;dt>-s 2560x1440&lt;/dt>
&lt;dd>Set the video resolution to 2560x1440 pixels.&lt;/dd>
&lt;dt>-i %04d.png&lt;/dt>
&lt;dd>This flag assumes there is a folder of .png files in the same directory named in the format 0001.png, 0002.png, etc. It will load all images following this naming convention as inputs to be processed.&lt;/dd>
&lt;/dl>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&amp;gt;ffmpeg -start_number &lt;span class="m">0140&lt;/span> -i %04d.png interpolated-0.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="re-encode-video-for-youtube">Re-encode Video For YouTube&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i transition.mp4 -c:v libx264 -preset slow -crf &lt;span class="m">18&lt;/span> -c:a copy -pix_fmt yuv420p transition.mkv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>-i transition.mp4&lt;/dt>
&lt;dd>Select &amp;quot;transition.mp4&amp;quot; as the input file.&lt;/dd>
&lt;dt>-c:v libx264&lt;/dt>
&lt;dd>set the video codec to H.264&lt;/dd>
&lt;dt>-preset slow&lt;/dt>
&lt;dd>A preset is a collection of options that will provide a certain encoding speed to compression ratio. A slower preset will provide better compression (compression is quality per filesize). This means that, for example, if you target a certain file size or constant bit rate, you will achieve better quality with a slower preset. Similarly, for constant quality encoding, you will simply save bitrate by choosing a slower preset. Use the slowest preset that you have patience for. The available presets in descending order of speed are:&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>ultrafast&lt;/li>
&lt;li>superfast&lt;/li>
&lt;li>veryfast&lt;/li>
&lt;li>faster&lt;/li>
&lt;li>fast&lt;/li>
&lt;li>medium (default preset)&lt;/li>
&lt;li>slow&lt;/li>
&lt;li>slower&lt;/li>
&lt;li>veryslow&lt;/li>
&lt;/ul>
&lt;dl>
&lt;dt>-crf 18&lt;/dt>
&lt;dd>Constant Rate Factor (CRF). The range of the CRF scale is 0–51, where 0 is lossless, 23 is the default, and 51 is worst quality possible. A lower value generally leads to higher quality, and a subjectively sane range is 17–28. Consider 17 or 18 to be visually lossless or nearly so; it should look the same or nearly the same as the input but it isn't technically lossless.&lt;/dd>
&lt;dt>-c:a copy&lt;/dt>
&lt;dd>Copy the audio codec from that of the input file to the output file&lt;/dd>
&lt;dt>-pix_fmt yuv420p&lt;/dt>
&lt;dd>This flag is only needed for your output to work in QuickTime, Windows Media player and other offline media players. These players only support the YUV planar color space with 4:2:0 chroma subsampling for H.264 video. Otherwise, depending on your source, ffmpeg may output to a pixel format that may be incompatible with these players.&lt;/dd>
&lt;/dl>
&lt;h2>Video Filters&lt;/h2>
&lt;h3 id="stack-two-videos-side-by-side">Stack two videos side-by-side&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Shell" data-lang="Shell">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i &lt;span class="s2">&amp;#34;left.mp4&amp;#34;&lt;/span> -i &lt;span class="s2">&amp;#34;right.mp4&amp;#34;&lt;/span> -filter_complex hstack output.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command uses the ffmpeg software to combine two video files, &amp;quot;left.mp4&amp;quot; and &amp;quot;right.mp4&amp;quot;, into a single output video file &amp;quot;output.mp4&amp;quot;. The &amp;quot;-i&amp;quot; option specifies the input video files. The &amp;quot;-filter_complex&amp;quot; option applies the &amp;quot;hstack&amp;quot; filter, which horizontally stacks the two input videos side by side to form a single output video.&lt;/p></description></item><item><title>Robo Mirror</title><link>https://trimad.github.io/post/2019-02-28-robo-mirror/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-02-28-robo-mirror/</guid><description>
&lt;p>This batch file utilizes robocopy to mirror a list of files contained within &amp;quot;targets.txt&amp;quot; in the same directory.&lt;/p>
&lt;script src="https://gist.github.com/Trimad/3be939bc60c6eae1ffd99e4e1032e743.js">&lt;/script></description></item></channel></rss>