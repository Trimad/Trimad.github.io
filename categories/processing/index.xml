<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Processing on Hugo Grimoire</title><link>https://trimad.github.io/categories/processing/</link><description>Recent content in Processing on Hugo Grimoire</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://trimad.github.io/categories/processing/index.xml" rel="self" type="application/rss+xml"/><item><title>Logistic Map</title><link>https://trimad.github.io/post/2022-05-14-logistic-map/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2022-05-14-logistic-map/</guid><description>
hell yeah dude
Repository for code that generated this fractal: https://github.com/Trimad/Sandbox</description></item><item><title>k-means Clustering</title><link>https://trimad.github.io/post/2021-05-18-k-means-clustering/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2021-05-18-k-means-clustering/</guid><description>
Wikipedia k-means clustering is a method of vector quantization, originally from signal processing, that aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean (cluster centers or cluster centroid), serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.
GitHub repository: https://github.com/Trimad/k-means-clustering</description></item><item><title>Blending Textures With Open Simplex Noise</title><link>https://trimad.github.io/post/2019-08-18-blending-textures-with-open-simplex-noise/</link><pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2019-08-18-blending-textures-with-open-simplex-noise/</guid><description/></item><item><title>Cube Wave</title><link>https://trimad.github.io/post/2018-12-30-cube-wave/</link><pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-12-30-cube-wave/</guid><description>
Here's my take on... Daniel Shiffman's take on... Beesandbomb's take on the cube wave. Sources - https://twitter.com/beesandbombs/status/940639806522085376 - https://www.</description></item><item><title>Lorenz Doll</title><link>https://trimad.github.io/post/2018-11-21-lorenz-doll/</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-11-21-lorenz-doll/</guid><description>
In this sketch I turned every pixel of an image into a Lorenz System. I mapped the velocity of that system to the brightness value of the pixel. This was the result. Sadly, the Processing sketch I made this with is gone forever.</description></item><item><title>Counting Sort</title><link>https://trimad.github.io/post/2018-07-18-counting-sort/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-07-18-counting-sort/</guid><description/></item><item><title>Barnsley Fern</title><link>https://trimad.github.io/post/2018-06-28-barnsley-fern/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-06-28-barnsley-fern/</guid><description>
hell yeah dude</description></item><item><title>Kruskal's Algorithm Visualized With Processing</title><link>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-04-11-kruskal-algorithm-processing/</guid><description/></item><item><title>Collatz Conjecture + Unit Circle</title><link>https://trimad.github.io/post/2018-04-09-collatz-conjecture-unit-circle/</link><pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-04-09-collatz-conjecture-unit-circle/</guid><description/></item><item><title>Minimum Spanning Tree Visualized</title><link>https://trimad.github.io/post/2018-04-07-minimum-spanning-tree-visualized/</link><pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-04-07-minimum-spanning-tree-visualized/</guid><description/></item><item><title>AT&amp;T Hackathon</title><link>https://trimad.github.io/post/2018-03-12-att-hackathon/</link><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-03-12-att-hackathon/</guid><description/></item><item><title>Generating Terrain with Open Simplex Noise</title><link>https://trimad.github.io/post/2018-01-03-generating-terrain-with-open-simplex-noise/</link><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-01-03-generating-terrain-with-open-simplex-noise/</guid><description/></item><item><title>Open Simplex Noise</title><link>https://trimad.github.io/post/2018-01-02-open-simplex-noise/</link><pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2018-01-02-open-simplex-noise/</guid><description/></item><item><title>Flippy Tiles</title><link>https://trimad.github.io/post/2017-11-18-flippy-tiles/</link><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-11-18-flippy-tiles/</guid><description/></item><item><title>Juno Cam Image Processing</title><link>https://trimad.github.io/post/2017-11-12-juno-cam-image-processing/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://trimad.github.io/post/2017-11-12-juno-cam-image-processing/</guid><description/></item></channel></rss>